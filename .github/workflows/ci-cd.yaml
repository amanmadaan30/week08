name: E-Commerce CI/CD Pipeline
on:
  pull_request: { branches: [ develop, main ] }
  push: { branches: [ develop, main ] }
env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
jobs:
  test_backends:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env: { POSTGRES_USER: postgres, POSTGRES_PASSWORD: postgres, POSTGRES_DB: products }
        ports: [ "5432:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
      order_db:
        image: postgres:15
        env: { POSTGRES_USER: postgres, POSTGRES_PASSWORD: postgres, POSTGRES_DB: orders }
        ports: [ "5433:5432" ]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: "3.10" }
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          for req in backend/*/requirements.txt; do pip install -r "$req"; done
          pip install pytest httpx
      - name: Run Product Service Tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q
      - name: Run Order Service Tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: pytest tests --maxfail=1 --disable-warnings -q

  build_images:
    runs-on: ubuntu-latest
    needs: test_backends
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: ACR Login
        run: az acr login --name ${{ secrets.ACR_NAME }}
      - name: Build & Push Product Service
        run: |
          docker build -t $ACR_LOGIN_SERVER/product_service:${{ env.IMAGE_TAG }} ./backend/product_service
          docker push $ACR_LOGIN_SERVER/product_service:${{ env.IMAGE_TAG }}
      - name: Build & Push Order Service
        run: |
          docker build -t $ACR_LOGIN_SERVER/order_service:${{ env.IMAGE_TAG }} ./backend/order_service
          docker push $ACR_LOGIN_SERVER/order_service:${{ env.IMAGE_TAG }}
      - name: Build & Push Frontend
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }} ./frontend
          docker push $ACR_LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}
      - name: Logout Azure
        if: always()
        run: az logout

  deploy:
    runs-on: ubuntu-latest
    needs: build_images
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with: 
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS Context
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RG }} \
            --name ${{ secrets.AKS_CLUSTER }} \
            --overwrite-existing \
            --admin
      - name: Update image tags/placeholders
        run: |
          sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.IMAGE_TAG }}|g" k8s/product-service.yaml
          sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.IMAGE_TAG }}|g" k8s/order-service.yaml
          sed -i "s|IMAGE_TAG_PLACEHOLDER|${{ env.IMAGE_TAG }}|g" k8s/frontend.yaml
          sed -i "s|ACR_LOGIN_SERVER_PLACEHOLDER|${{ env.ACR_LOGIN_SERVER }}|g" k8s/*.yaml
      - name: Deploy Backend
        run: |
          kubectl apply -f k8s/configmaps.yaml || true
          kubectl apply -f k8s/secrets.yaml || true
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml
      - name: Wait for LoadBalancer IPs
        run: |
          set -e
          for svc in product-service order-service; do
            echo "Waiting for $svc external IP..."
            for i in {1..60}; do
              IP=$(kubectl get svc $svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
              if [ -n "$IP" ]; then echo "$svc IP: $IP"; break; fi
              sleep 10
            done
          done
      - name: Deploy Frontend
        run: kubectl apply -f k8s/frontend.yaml
